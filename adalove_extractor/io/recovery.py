"""
Recovery Manager para detec√ß√£o e retomada de execu√ß√µes interrompidas.

Este m√≥dulo implementa sistema de recupera√ß√£o que:
- Detecta automaticamente execu√ß√µes interrompidas
- Oferece interface interativa para retomada
- Consolida dados de m√∫ltiplas execu√ß√µes
- Limpa arquivos tempor√°rios ap√≥s recupera√ß√£o
"""

import json
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple

from .checkpoint import CheckpointManager
from .incremental_writer import IncrementalWriter


class RecoveryManager:
    """
    Gerenciador de recupera√ß√£o para execu√ß√µes interrompidas.
    
    Funcionalidades:
    - Detec√ß√£o autom√°tica de checkpoints √≥rf√£os
    - Interface interativa para escolha de a√ß√£o
    - Consolida√ß√£o de dados de m√∫ltiplas execu√ß√µes
    - Limpeza de arquivos tempor√°rios
    """
    
    def __init__(self, turma: str, output_dir: str):
        """
        Inicializa o gerenciador de recupera√ß√£o.
        
        Args:
            turma: Nome da turma
            output_dir: Diret√≥rio base de sa√≠da
        """
        self.turma = turma
        self.output_dir = output_dir
        self.turma_dir = Path(output_dir) / turma
        
    def detect_interrupted(self) -> bool:
        """
        Detecta se existe execu√ß√£o interrompida para esta turma.
        
        Returns:
            True se existe checkpoint recuper√°vel
        """
        checkpoint_path = self.turma_dir / "progress.json"
        
        if not checkpoint_path.exists():
            return False
            
        try:
            checkpoint_mgr = CheckpointManager(self.turma, self.output_dir, "dummy")
            return checkpoint_mgr.is_recoverable()
        except Exception:
            return False
            
    def load_checkpoint(self) -> Dict[str, Any]:
        """
        Carrega dados do checkpoint interrompido.
        
        Returns:
            Dados do checkpoint
            
        Raises:
            RuntimeError: Se n√£o conseguir carregar checkpoint
        """
        checkpoint_path = self.turma_dir / "progress.json"
        
        if not checkpoint_path.exists():
            raise RuntimeError("Nenhum checkpoint encontrado")
            
        try:
            with open(checkpoint_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            raise RuntimeError(f"Erro ao carregar checkpoint: {e}")
            
    def load_temp_data(self) -> List[Dict[str, Any]]:
        """
        Carrega dados do arquivo JSONL tempor√°rio.
        
        Returns:
            Lista de cards j√° extra√≠dos
        """
        all_cards = []
        
        # Procura por arquivos temp_*.jsonl
        temp_files = list(self.turma_dir.glob("cards_temp_*.jsonl"))
        
        for temp_file in temp_files:
            try:
                with open(temp_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line:
                            card = json.loads(line)
                            # Remove metadata interna
                            card.pop("_written_at", None)
                            card.pop("_execution_id", None)
                            all_cards.append(card)
            except Exception as e:
                print(f"‚ö†Ô∏è Aviso: Erro ao ler arquivo {temp_file}: {e}")
                
        return all_cards
        
    def merge_temp_data(self) -> List[Dict[str, Any]]:
        """
        Consolida dados de m√∫ltiplos arquivos tempor√°rios.
        
        Returns:
            Lista consolidada de cards √∫nicos
        """
        all_cards = self.load_temp_data()
        
        # Remove duplicatas baseado em campos √∫nicos
        seen_cards = set()
        unique_cards = []
        
        for card in all_cards:
            # Cria chave √∫nica baseada em semana + t√≠tulo + descri√ß√£o
            key = (
                card.get("semana", ""),
                card.get("titulo", ""),
                card.get("descricao", "")
            )
            
            if key not in seen_cards:
                seen_cards.add(key)
                unique_cards.append(card)
                
        return unique_cards
        
    def prompt_recovery(self) -> str:
        """
        Exibe prompt interativo para recupera√ß√£o.
        
        Returns:
            Op√ß√£o escolhida: 'continue', 'restart', 'abort'
        """
        checkpoint = self.load_checkpoint()
        
        print(f"\n‚ö†Ô∏è  EXECU√á√ÉO ANTERIOR DETECTADA!")
        print(f"üìä Progresso: {len(checkpoint.get('semanas_processadas', []))}/{len(checkpoint.get('semanas_descobertas', []))} semanas")
        print(f"üìù Cards extra√≠dos: {checkpoint.get('cards_extraidos', 0)}")
        print(f"‚è∞ √öltima atualiza√ß√£o: {checkpoint.get('ultima_atualizacao', 'N/A')}")
        print(f"üîÑ Status: {checkpoint.get('status', 'unknown')}")
        
        print(f"\n‚ùì Escolha uma op√ß√£o:")
        print(f"   (C)ontinuar de onde parou")
        print(f"   (R)ecome√ßar do zero")
        print(f"   (A)bortar")
        
        while True:
            try:
                opcao = input("\nOp√ß√£o [C/r/a]: ").strip().lower()
                
                if opcao in ['c', '']:
                    return 'continue'
                elif opcao == 'r':
                    return 'restart'
                elif opcao == 'a':
                    return 'abort'
                else:
                    print("Op√ß√£o inv√°lida. Digite C, R ou A.")
            except (EOFError, KeyboardInterrupt):
                print("\n‚ùå Entrada cancelada pelo usu√°rio")
                return 'abort'
                
    def cleanup_all(self) -> None:
        """
        Remove todos os arquivos de checkpoint e tempor√°rios.
        """
        try:
            # Remove checkpoint principal
            checkpoint_path = self.turma_dir / "progress.json"
            if checkpoint_path.exists():
                checkpoint_path.unlink()
                
            # Remove arquivos tempor√°rios JSONL
            temp_files = list(self.turma_dir.glob("cards_temp_*.jsonl"))
            for temp_file in temp_files:
                temp_file.unlink()
                
            # Remove backups de semanas
            backup_files = list(self.turma_dir.glob("checkpoint_semana_*.json"))
            for backup_file in backup_files:
                backup_file.unlink()
                
            print("üßπ Limpeza conclu√≠da.")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Aviso: Erro durante limpeza: {e}")
            
    def cleanup_after_recovery(self) -> None:
        """
        Limpa arquivos tempor√°rios ap√≥s recupera√ß√£o bem-sucedida.
        """
        try:
            # Remove apenas arquivos tempor√°rios, mant√©m backups para debug
            temp_files = list(self.turma_dir.glob("cards_temp_*.jsonl"))
            for temp_file in temp_files:
                temp_file.unlink()
                
        except Exception as e:
            print(f"‚ö†Ô∏è Aviso: Erro durante limpeza p√≥s-recupera√ß√£o: {e}")
            
    def get_recovery_summary(self) -> Dict[str, Any]:
        """
        Retorna resumo da situa√ß√£o de recupera√ß√£o.
        
        Returns:
            Dicion√°rio com informa√ß√µes de recupera√ß√£o
        """
        if not self.detect_interrupted():
            return {"status": "no_interruption"}
            
        try:
            checkpoint = self.load_checkpoint()
            temp_cards = self.load_temp_data()
            
            return {
                "status": "interrupted",
                "checkpoint": checkpoint,
                "temp_cards_count": len(temp_cards),
                "semanas_processadas": len(checkpoint.get("semanas_processadas", [])),
                "semanas_total": len(checkpoint.get("semanas_descobertas", [])),
                "execution_id": checkpoint.get("execution_id"),
                "last_update": checkpoint.get("ultima_atualizacao")
            }
            
        except Exception as e:
            return {
                "status": "error",
                "error": str(e)
            }
            
    def validate_recovery_data(self) -> Tuple[bool, List[str]]:
        """
        Valida integridade dos dados de recupera√ß√£o.
        
        Returns:
            Tupla (is_valid, error_messages)
        """
        errors = []
        
        try:
            checkpoint = self.load_checkpoint()
            
            # Valida estrutura b√°sica do checkpoint
            required_fields = ["turma", "execution_id", "status", "semanas_descobertas"]
            for field in required_fields:
                if field not in checkpoint:
                    errors.append(f"Campo obrigat√≥rio ausente: {field}")
                    
            # Valida dados tempor√°rios
            temp_cards = self.load_temp_data()
            
            # Verifica se n√∫mero de cards bate com checkpoint
            checkpoint_cards = checkpoint.get("cards_extraidos", 0)
            if len(temp_cards) != checkpoint_cards:
                errors.append(f"Inconsist√™ncia: checkpoint diz {checkpoint_cards} cards, mas encontrados {len(temp_cards)}")
                
            # Valida estrutura dos cards
            for i, card in enumerate(temp_cards[:5]):  # Valida apenas primeiros 5
                if not isinstance(card, dict):
                    errors.append(f"Card {i} n√£o √© dicion√°rio")
                    continue
                    
                if "semana" not in card:
                    errors.append(f"Card {i} sem campo 'semana'")
                    
            return len(errors) == 0, errors
            
        except Exception as e:
            return False, [f"Erro na valida√ß√£o: {e}"]
            
    def resume_from(self, execution_id: str) -> Tuple[CheckpointManager, IncrementalWriter]:
        """
        Prepara inst√¢ncias para retomada de execu√ß√£o.
        
        Args:
            execution_id: ID da execu√ß√£o a ser retomada
            
        Returns:
            Tupla (CheckpointManager, IncrementalWriter) configurados
        """
        checkpoint_mgr = CheckpointManager.from_existing(
            self.turma, self.output_dir, execution_id
        )
        
        incremental_writer = IncrementalWriter.from_existing(
            self.turma, self.output_dir, execution_id
        )
        
        return checkpoint_mgr, incremental_writer






